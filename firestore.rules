rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Make sure the uid of the requesting user matches name of the user document
    // The wildcard {userId} gives us access to that value in a function
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    } 
    match /events/{id} {
      // public, read-only 
      allow read: if true;
      allow write: if false;
    }
    match /generalCourts/{document=**} {
      // public, read-only 
      allow read: if true;
      allow write: if false;
    }
    match /billTracker/{document=**} {
      // public, read-only 
      allow read: if true;
      allow write: if false;
    }
    function isAdmin() {
      return  request.auth.token.get("role", "user") == "admin"
    }
    match /profiles/{uid} {
      function validUser() {
        return request.auth.uid == uid
      }

      function validRoleChange() {
        return !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])
      }

      function validPublicChange() {
        return !request.resource.data.diff(resource.data).affectedKeys().hasAny(['public'])
          || request.auth.token.get("role", "user") == "user"
      }

      // Always visible to the user and public if `public` is true.
      // Always visible to admins.
      // Only writable by the user & admin
      // Do not allow users to delete their profile, set the role field.
      // Only admins can delete a user profile, set the user role field. 
      // Only normal "user" roles & admins can toggle visibility.
      allow read, write: if request.auth.token.get("role", "user") == "admin"
      allow read: if resource.data.public || request.auth.uid == uid
      allow create: if validUser() && request.resource.data.role == 'user' && request.resource.data.public == false
      allow update: if validUser() && validRoleChange() && validPublicChange()
    }
    // Allow querying publications individually or with a collection group.
    match /{path=**}/publishedTestimony/{id} {

      // public, read-only. all for admin
      allow read: if true
      allow read, write: if request.auth.token.get("role", "user") == "admin"

    }
    match /reports/{rid} {

      // Anyone can report
      allow create: if true
      // Only admins can do anything with it
      allow read, write: if request.auth.token.get("role", "user") == "admin"
    }
    match /users/{uid} {
      allow read, write: if request.auth.token.get("role", "user") == "admin"
      match /draftTestimony/{id} {
        // private, only accessible by the user 
        allow read, write: if request.auth.uid == uid
      }
      match /userNotificationFeed/{id} {
        // TODO: do not allow users to modify content, only view status.
        // private, only accessible by the user
        allow read, write: if request.auth.uid == uid
      }
      match /users/{uid}/activeTopicSubscriptions/{topicName} {
        allow read, write: if debug(request.auth.uid == uid);
      }
      match /archivedTestimony/{id} {
        // Publicly readable, for posterity.
        allow read: if true 
        allow read, write: if request.auth.token.get("role", "user") == "admin"
      }
    }
  }
}